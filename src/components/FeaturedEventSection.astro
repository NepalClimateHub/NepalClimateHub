---
import '../styles/global.css';
import '../styles/components/FeaturedCardStyles.css';
import { Icon } from 'astro-icon/components';
// import eventsTemp from '../data/eventsTemp.json';
import type { Event as ApiEvent } from '../types/event';
import { fetchEvents } from '../api';
import { createSlug } from '../utils/slug';
const { startIndex, endIndex, title, currentEventId } = Astro.props;

const { data: apiEvents } = await fetchEvents();

function stripHtml(html: string) {
  return html.replace(/<[^>]*>/g, '');
}

const transformedEvents = (apiEvents || [])
  .filter(
    (event) =>
      event?.bannerImageUrl &&
      event.title &&
      event.tags &&
      event.locationType
  )
  .map((event: any) => ({
    id: event.id,
    title: event.title,
    type: event.type,
    location:
      event.locationType.charAt(0).toUpperCase() +
      event.locationType.slice(1).toLowerCase(),
    province: event.address?.state || '',
    status: event.status,
    format: event.format,
    cost: event.cost,
    category: event.tags?.map((tag: any) => tag.tag) || [],
    bannerImage: event.bannerImageUrl || '/placeholder.svg',
    description: stripHtml(event.description || '') || '',
    organizer: event.organizer || '',
    startDate: event.startDate || '',
    registrationLink: event.registrationLink || '',
    contactEmail: event.contactEmail || '',
  }));

const filteredEvents = currentEventId
  ? transformedEvents.filter(
      (event) => event.id.toString() !== currentEventId.toString()
    )
  : transformedEvents;

const featuredEvents = filteredEvents.slice(
  startIndex,
  Math.min(endIndex, startIndex + 4)
);
---

<div class="section-container featured-card-section">
  <h2 class="section-heading">{title}</h2>

  <div class="cards-container">
    {
      featuredEvents.map((event) => (
        <a class="card event-card" href={`/events/${createSlug(event.title)}`}>
          <div class="img-wrapper" style="padding: 0px;">
            <img
              src={event.bannerImage || "/placeholder.svg"}
              alt={event.title}
              style="object-fit: cover;"
            />
          </div>
          <div class="details">
            <h3 class="name">{event.title}</h3>
            <p class="location">
              <span class="icon">
                <Icon name="mdi:my-location" class="icon" />
              </span>
              <span class="address">{event.location}</span>
            </p>
            <p class="about">
              {event.description.split("<br>")[0].substring(0, 108)}...
            </p>
            <div class="tags">
              {event.category.slice(0, 3).map((tag: string) => (
                <span class="tag">{tag}</span>
              ))}
            </div>
          </div>
        </a>
      ))
    }

    <div class="card-controls event-card-controls">
      <span class="bar bar-event-section"></span>
      <span class="bar bar-event-section"></span>
      <span class="bar bar-event-section"></span>
      <span class="bar bar-event-section"></span>
    </div>
  </div>

  <a href="/events" class="cta-link">See All</a>
</div>

<script>
  import { createMobileSlider } from "src/utils/slider";

  const cards = document.querySelectorAll<HTMLElement>(".event-card");
  const cardControlsElement = document.querySelector<HTMLElement>(
    ".event-card-controls"
  );
  const bars =
    cardControlsElement?.querySelectorAll<HTMLElement>(".bar-event-section");

  if (cardControlsElement && bars) {
    createMobileSlider(cards, bars);
  }
</script>
